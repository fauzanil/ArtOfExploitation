
;; Function main (main, funcdef_no=2, decl_uid=2621, cgraph_uid=2, symbol_order=2)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 5:  (0) rm  (1) re {*cmpsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 10:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 14:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 15:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) lBwBz {*call} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 22:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 24:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 27:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 29:  (0) m  (1) re {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 32:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 35:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 38:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 40:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 41:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 43:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=6,losers=1,rld_nregs=1
          alt=1,overall=6,losers=1,rld_nregs=1
	 Choosing alt 0 in insn 45:  (0) =rm  (1) 0  (2) re {*subsi_1}
      Creating newreg=109 from oldreg=94, assigning class GENERAL_REGS to r109
   45: {r109:SI=r109:SI-r93:SI;clobber flags:CC;}
      REG_DEAD r93:SI
      REG_DEAD r90:SI
      REG_UNUSED flags:CC
    Inserting insn reload before:
   69: r109:SI=r90:SI
    Inserting insn reload after:
   70: r94:SI=r109:SI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) =rm  (1) 0  (2) cI {*ashlsi3_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            alt=1,overall=12,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 1 in insn 47:  (0) rm  (1) 0  (2) re {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 49:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) =r  (1) g {*movsi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 51:  (0) =r  (1) %0  (2) rme {*addsi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-4)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-8)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) =<  (1) ri*m {*pushsi2} (sp_off=-12)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) lBwBz {*call_value} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 56:  (0) =r  (1) %0  (2) rme {*addsi_1} (sp_off=-16)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) =r  (1) g {*movsi_internal}
	   Spilling non-eliminable hard regs: 6

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #1: **********

  BB 3
   Insn 17: point = 0
   Insn 16: point = 0
   Insn 15: point = 0
   Insn 14: point = 0
   Insn 13: point = 0
   Insn 12: point = 0
   Insn 11: point = 0
   Insn 10: point = 1
   Insn 9: point = 1
   Insn 8: point = 3
  BB 4
   Insn 65: point = 6
   Insn 64: point = 6
   Insn 60: point = 7
   Insn 57: point = 9
   Insn 56: point = 10
   Insn 55: point = 10
   Insn 54: point = 10
   Insn 53: point = 10
   Insn 52: point = 11
   Insn 51: point = 11
   Insn 50: point = 11
   Insn 49: point = 13
   Insn 48: point = 15
   Insn 47: point = 17
   Insn 46: point = 18
   Insn 70: point = 20
	Hard reg 0 is preferable by r109 with profit 1
   Insn 45: point = 22
   Insn 69: point = 23
	Hard reg 0 is preferable by r109 with profit 1
	Hard reg 4 is preferable by r109 with profit 1
   Insn 44: point = 25
   Insn 43: point = 26
   Insn 42: point = 26
   Insn 41: point = 26
   Insn 40: point = 27
   Insn 39: point = 27
   Insn 38: point = 29
   Insn 37: point = 31
   Insn 36: point = 32
   Insn 35: point = 33
   Insn 34: point = 33
   Insn 33: point = 33
   Insn 32: point = 34
   Insn 31: point = 34
   Insn 30: point = 36
   Insn 29: point = 37
   Insn 28: point = 38
   Insn 27: point = 39
   Insn 26: point = 39
   Insn 25: point = 39
   Insn 24: point = 40
   Insn 23: point = 40
   Insn 22: point = 42
   Insn 21: point = 44
  BB 2
   Insn 6: point = 46
   Insn 5: point = 46
   Insn 67: point = 46
 r87: [41..42]
 r88: [39..40]
 r89: [33..34]
 r90: [24..32]
 r91: [28..29]
 r92: [26..27]
 r93: [22..25]
 r94: [19..20]
 r95: [17..18]
 r96: [12..13]
 r97: [10..11]
 r98: [8..9]
 r99: [0..1]
 r100: [6..7]
 r101: [2..3]
 r102: [43..44]
 r103: [37..38]
 r104: [35..36]
 r105: [30..31]
 r106: [14..15]
 r108: [16..46] [4..5]
 r109: [21..23]
Compressing live ranges: from 47 to 42 - 89%
Ranges after the compression:
 r87: [38..39]
 r88: [36..37]
 r89: [30..31]
 r90: [22..29]
 r91: [26..27]
 r92: [24..25]
 r93: [20..23]
 r94: [18..19]
 r95: [16..17]
 r96: [12..13]
 r97: [10..11]
 r98: [8..9]
 r99: [0..1]
 r100: [6..7]
 r101: [2..3]
 r102: [40..41]
 r103: [34..35]
 r104: [32..33]
 r105: [28..29]
 r106: [14..15]
 r108: [16..41] [4..5]
 r109: [20..21]

********** Assignment #1: **********

	 Assigning to 109 (cl=GENERAL_REGS, orig=94, freq=3, tfirst=109, tfreq=3)...
	   Assign 4 to reload r109 (freq=3)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 6
New elimination table:
Can't eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=8)
Can't eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=-24)
changing reg in insn 22
changing reg in insn 23
changing reg in insn 23
changing reg in insn 25
changing reg in insn 31
changing reg in insn 33
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 39
changing reg in insn 41
changing reg in insn 44
changing reg in insn 45
changing reg in insn 46
changing reg in insn 46
changing reg in insn 47
changing reg in insn 49
changing reg in insn 50
changing reg in insn 50
changing reg in insn 53
changing reg in insn 57
changing reg in insn 60
changing reg in insn 9
changing reg in insn 11
changing reg in insn 60
changing reg in insn 64
changing reg in insn 8
changing reg in insn 9
changing reg in insn 21
changing reg in insn 22
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 37
changing reg in insn 38
changing reg in insn 48
changing reg in insn 49
changing reg in insn 67
changing reg in insn 48
changing reg in insn 37
changing reg in insn 30
changing reg in insn 21
changing reg in insn 8
changing reg in insn 5
changing reg in insn 38
changing reg in insn 22
deleting insn with uid = 69.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 13.
verify found no changes in insn with uid = 17.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 55.


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 6 [bp] 7 [sp] 20 [frame]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 2[cx] 3[bx] 4[si] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={27d,24u} r1={7d} r2={7d,1u} r3={1d,6u,2e} r4={2d,2u} r6={1d,8u} r7={21d,41u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r17={24d,1u} r18={6d} r19={6d} r20={1d,1u} r21={6d} r22={6d} r23={6d} r24={6d} r25={6d} r26={6d} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} 
;;    total ref usage 597{511d,84u,2e} in 54{48 regular + 6 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 0, next block 3, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 2 [cx] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 108
(note 3 1 67 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn/f 67 3 2 2 (set (reg:SI 3 bx [108])
        (reg:SI 2 cx)) 90 {*movsi_internal}
     (expr_list:REG_CFA_SET_VDRAP (reg:SI 3 bx [108])
        (nil)))
(note 2 67 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c:SI (reg:SI 3 bx [108]) [0 argc+0 S4 A32])
            (const_int 2 [0x2]))) getenv.c:6 7 {*cmpsi_1}
     (nil))
(jump_insn 6 5 7 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 19)
            (pc))) getenv.c:6 612 {*jcc_1}
     (nil)
 -> 19)
;;  succ:       3 (FALLTHRU)
;;              4
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 108

;; basic block 3, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2 (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 108
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 99 101
(note 7 6 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 8 7 9 3 (set (reg/f:SI 0 ax [101])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [108])
                (const_int 4 [0x4])) [0 argv+0 S4 A32])) getenv.c:7 90 {*movsi_internal}
     (nil))
(insn 9 8 10 3 (set (reg/f:SI 0 ax [orig:99 D.2643 ] [99])
        (mem/f:SI (reg/f:SI 0 ax [101]) [0 *argv_2(D)+0 S4 A32])) getenv.c:7 90 {*movsi_internal}
     (nil))
(insn 10 9 11 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -8 [0xfffffffffffffff8])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:7 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 11 10 12 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:99 D.2643 ] [99])) getenv.c:7 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 12 11 13 3 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (symbol_ref/f:SI ("*.LC0") [flags 0x2]  <var_decl 0x7ffff6846b40 *.LC0>)) getenv.c:7 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 13 12 14 3 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0x7ffff670cca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 16 [0x10]))) getenv.c:7 668 {*call_value}
     (nil)
    (nil))
(insn 14 13 15 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:7 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 15 14 16 3 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:8 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 16 15 17 3 (set (mem:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (const_int 0 [0])) getenv.c:8 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 17 16 18 3 (call (mem:QI (symbol_ref:SI ("exit") [flags 0x41]  <function_decl 0x7ffff6724000 exit>) [0 __builtin_exit S1 A8])
        (const_int 16 [0x10])) getenv.c:8 659 {*call}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]

(barrier 18 17 19)
;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 1, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       2
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 108
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 108
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [] 22 [] 23 [] 24 [] 25 [] 26 [] 27 [] 28 [] 29 [] 30 [] 31 [] 32 [] 33 [] 34 [] 35 [] 36 [] 37 [] 38 [] 39 [] 40 [] 41 [] 42 [] 43 [] 44 [] 45 [] 46 [] 47 [] 48 [] 49 [] 50 [] 51 [] 52 [] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 87 88 89 90 91 92 93 94 95 96 97 98 100 102 103 104 105 106
(code_label 19 18 20 4 2 "" [1 uses])
(note 20 19 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 4 (set (reg/f:SI 0 ax [102])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [108])
                (const_int 4 [0x4])) [0 argv+0 S4 A32])) getenv.c:10 90 {*movsi_internal}
     (nil))
(insn 22 21 23 4 (parallel [
            (set (reg/f:SI 0 ax [orig:87 D.2642 ] [87])
                (plus:SI (reg/f:SI 0 ax [102])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:10 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg:SI 3 bx [108])
                    (const_int 4 [0x4])) [0 argv+0 S4 A32])
            (const_int 4 [0x4]))
        (nil)))
(insn 23 22 24 4 (set (reg/f:SI 0 ax [orig:88 D.2643 ] [88])
        (mem/f:SI (reg/f:SI 0 ax [orig:87 D.2642 ] [87]) [0 *_3+0 S4 A32])) getenv.c:10 90 {*movsi_internal}
     (nil))
(insn 24 23 25 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:10 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 25 24 26 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:88 D.2643 ] [88])) getenv.c:10 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 26 25 27 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("getenv") [flags 0x41]  <function_decl 0x7ffff6815360 getenv>) [0 getenv S1 A8])
            (const_int 16 [0x10]))) getenv.c:10 668 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 27 26 28 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:10 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 28 27 29 4 (set (reg:SI 0 ax [103])
        (reg:SI 0 ax)) getenv.c:10 90 {*movsi_internal}
     (nil))
(insn 29 28 30 4 (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 ptr+0 S4 A32])
        (reg:SI 0 ax [103])) getenv.c:10 90 {*movsi_internal}
     (nil))
(insn 30 29 31 4 (set (reg/f:SI 0 ax [104])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [108])
                (const_int 4 [0x4])) [0 argv+0 S4 A32])) getenv.c:11 90 {*movsi_internal}
     (nil))
(insn 31 30 32 4 (set (reg/f:SI 0 ax [orig:89 D.2643 ] [89])
        (mem/f:SI (reg/f:SI 0 ax [104]) [0 *argv_2(D)+0 S4 A32])) getenv.c:11 90 {*movsi_internal}
     (nil))
(insn 32 31 33 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:11 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 33 32 34 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:89 D.2643 ] [89])) getenv.c:11 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn/i 34 33 35 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strlen") [flags 0x41]  <function_decl 0x7ffff6706948 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 16 [0x10]))) getenv.c:11 668 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 35 34 36 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:11 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 36 35 37 4 (set (reg:SI 4 si [orig:90 D.2644 ] [90])
        (reg:SI 0 ax)) getenv.c:11 90 {*movsi_internal}
     (nil))
(insn 37 36 38 4 (set (reg/f:SI 0 ax [105])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [108])
                (const_int 4 [0x4])) [0 argv+0 S4 A32])) getenv.c:11 90 {*movsi_internal}
     (nil))
(insn 38 37 39 4 (parallel [
            (set (reg/f:SI 0 ax [orig:91 D.2642 ] [91])
                (plus:SI (reg/f:SI 0 ax [105])
                    (const_int 8 [0x8])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:11 217 {*addsi_1}
     (expr_list:REG_EQUAL (plus:SI (mem/f/c:SI (plus:SI (reg:SI 3 bx [108])
                    (const_int 4 [0x4])) [0 argv+0 S4 A32])
            (const_int 8 [0x8]))
        (nil)))
(insn 39 38 40 4 (set (reg/f:SI 0 ax [orig:92 D.2643 ] [92])
        (mem/f:SI (reg/f:SI 0 ax [orig:91 D.2642 ] [91]) [0 *_10+0 S4 A32])) getenv.c:11 90 {*movsi_internal}
     (nil))
(insn 40 39 41 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -12 [0xfffffffffffffff4])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:11 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 41 40 42 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:92 D.2643 ] [92])) getenv.c:11 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn/i 42 41 43 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("strlen") [flags 0x41]  <function_decl 0x7ffff6706948 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 16 [0x10]))) getenv.c:11 668 {*call_value}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (nil))
(insn 43 42 44 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:11 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 44 43 45 4 (set (reg:SI 0 ax [orig:93 D.2644 ] [93])
        (reg:SI 0 ax)) getenv.c:11 90 {*movsi_internal}
     (nil))
(insn 45 44 70 4 (parallel [
            (set (reg:SI 4 si [orig:94 D.2644 ] [94])
                (minus:SI (reg:SI 4 si [orig:94 D.2644 ] [94])
                    (reg:SI 0 ax [orig:93 D.2644 ] [93])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:11 260 {*subsi_1}
     (nil))
(insn 70 45 46 4 (set (reg:SI 0 ax [orig:94 D.2644 ] [94])
        (reg:SI 4 si [orig:94 D.2644 ] [94])) getenv.c:11 90 {*movsi_internal}
     (nil))
(insn 46 70 47 4 (parallel [
            (set (reg:SI 0 ax [orig:95 D.2644 ] [95])
                (ashift:SI (reg:SI 0 ax [orig:94 D.2644 ] [94])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:11 511 {*ashlsi3_1}
     (nil))
(insn 47 46 48 4 (parallel [
            (set (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                        (const_int -28 [0xffffffffffffffe4])) [0 ptr+0 S4 A32])
                (plus:SI (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                            (const_int -28 [0xffffffffffffffe4])) [0 ptr+0 S4 A32])
                    (reg:SI 0 ax [orig:95 D.2644 ] [95])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:11 217 {*addsi_1}
     (nil))
(insn 48 47 49 4 (set (reg/f:SI 0 ax [106])
        (mem/f/c:SI (plus:SI (reg:SI 3 bx [108])
                (const_int 4 [0x4])) [0 argv+0 S4 A32])) getenv.c:12 90 {*movsi_internal}
     (nil))
(insn 49 48 50 4 (parallel [
            (set (reg/f:SI 0 ax [orig:96 D.2642 ] [96])
                (plus:SI (reg/f:SI 0 ax [106])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:12 217 {*addsi_1}
     (nil))
(insn 50 49 51 4 (set (reg/f:SI 0 ax [orig:97 D.2643 ] [97])
        (mem/f:SI (reg/f:SI 0 ax [orig:96 D.2642 ] [96]) [0 *_16+0 S4 A32])) getenv.c:12 90 {*movsi_internal}
     (nil))
(insn 51 50 52 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int -4 [0xfffffffffffffffc])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:12 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 4 [0x4])
        (nil)))
(insn 52 51 53 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (mem/f/c:SI (plus:SI (reg/f:SI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 ptr+0 S4 A32])) getenv.c:12 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 8 [0x8])
        (nil)))
(insn 53 52 54 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (reg/f:SI 0 ax [orig:97 D.2643 ] [97])) getenv.c:12 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 12 [0xc])
        (nil)))
(insn 54 53 55 4 (set (mem/f:SI (pre_dec:SI (reg/f:SI 7 sp)) [0  S4 A32])
        (symbol_ref/f:SI ("*.LC1") [flags 0x2]  <var_decl 0x7ffff6846bd0 *.LC1>)) getenv.c:12 66 {*pushsi2}
     (expr_list:REG_ARGS_SIZE (const_int 16 [0x10])
        (nil)))
(call_insn 55 54 56 4 (set (reg:SI 0 ax)
        (call (mem:QI (symbol_ref:SI ("printf") [flags 0x41]  <function_decl 0x7ffff670cca8 printf>) [0 __builtin_printf S1 A8])
            (const_int 16 [0x10]))) getenv.c:12 668 {*call_value}
     (nil)
    (nil))
(insn 56 55 57 4 (parallel [
            (set (reg/f:SI 7 sp)
                (plus:SI (reg/f:SI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) getenv.c:12 217 {*addsi_1}
     (expr_list:REG_ARGS_SIZE (const_int 0 [0])
        (nil)))
(insn 57 56 60 4 (set (reg:SI 0 ax [orig:98 D.2645 ] [98])
        (const_int 0 [0])) <built-in>:0 90 {*movsi_internal}
     (nil))
(insn 60 57 64 4 (set (reg:SI 0 ax [orig:100 <retval> ] [100])
        (reg:SI 0 ax [orig:98 D.2645 ] [98])) <built-in>:0 90 {*movsi_internal}
     (nil))
(insn 64 60 65 4 (set (reg/i:SI 0 ax)
        (reg:SI 0 ax [orig:100 <retval> ] [100])) getenv.c:13 90 {*movsi_internal}
     (nil))
(insn 65 64 68 4 (use (reg/i:SI 0 ax)) getenv.c:13 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]

(note 68 65 0 NOTE_INSN_DELETED)
